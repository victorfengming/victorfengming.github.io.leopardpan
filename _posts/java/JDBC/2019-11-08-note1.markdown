---  
layout: post  
title: 'JDBC笔记01'  
date: 2019-11-08  
tags: Java basis note JDBC
---  
  
  
* content  
{:toc}  
  
  
  
  
### 学习目标  
- 理解JDBC原理
- 掌握Connection接口的使用
- 掌握Statement接口的使用
- 掌握ResultSet接口的使用
- 掌握PreparedStatement接口的使用
- 掌握Properties类与配置文件的使用

### JDBC 概念
JDBC  (Java DataBase Connectivity)
Java数据库连接技术的简称，提供连接各种常用数据库的能力
说白了就是java语言连接数据库
```
有一个程序员,他要写一套程序,但是他不知道公司用什么数据库

所以,他就得学java连mysql连Oracle,连DB2,
市面上所有的关系型数据库,他都得学习一遍,对吧!

而我们期望使用统一的一套Java代码可以操作所有的关系型数据库
有一个程序员终于忍不住了,写了个JDBC
JDBC:定义了操作所有关系型数据库的规则(接口)

这里只是写了接口,但是没有写具体的实现类,那么这个实现类谁写呢

sun公司说了,每一个数据库的厂商你们自己写实现类
所以每个数据库厂商都写了不同的实现类,不同版本的实现类

我们给这个实现类起了个名字,叫做数据库驱动

```

JDBC本质:其实就是官方(Sun公司)定义的一套操作所有关系型数据库的规则,及接口.
各个数据库厂商去实现这套接口,提供数据库驱动jar包.我们可以使用这套接口(JDBC)编程,真正执行的代码是驱动jar包中的实现类.

## JDBC快速入门
### 步骤:
1. 导入驱动jar包
    官网mysql驱动jar包下载地址:[mysql/mysql-connector-java](http://central.maven.org/maven2/mysql/mysql-connector-java/)
    1. 复制mysql-connector-java-5.1.37.jar
    2. 右键-->Add as library
    
2. 注册驱动
3. 获取数据库的连接对象
4. 定义sql
5. 获取执行sql语句的对象 statement
6. 执行sql,接收返回结果
7. 处理结果
8. 释放资源

### 实例代码
```java
package cn.itcast.jdbc;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

/**
 * @author victor
 * @site https://victorfengming.github.io/
 * @company XDL
 * @project itcast
 * @package cn.itcast.jdbc
 * @created 2019-11-07 23:43
 * @function ""
 */
public class JdbcDemo01 {

    public static void main(String[] args) throws Exception {
        // 1. 导入驱动jar包
        // 2.注册驱动
        Class.forName("com.mysql.jdbc.Driver");
        // 3.获取数据库连接对象
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/plan","root","");

        //4. 定义sql
        String sql = "use plan";
        //5. 获取执行sql语句的对象 statement
        Statement stmt = conn.createStatement();
        //6. 执行sql,接收返回结果
        int count = stmt.executeUpdate(sql);
        //7. 处理结果
        System.out.println(count);
        //8. 释放资源
        stmt.clearBatch();
        conn.close();
    }
}

```

### 详解各个对象
- DriverManager ：  
    驱动管理对象,用于管理JDBC驱动
    * 功能:
        1. 注册驱动  
            1. 注册与给定的驱动程序`static void registerDriver(Driver driver)`  
            2. 写代码使用:  
                1. `Class.forName("com.mysql.jdbc.Driver");`好像这个类中有一个静态代码块,这里面有现成的代码
                2. 通过查看源码发现:在com.mysql.jdbc.Driver类中存在静态代码块
                ```java
               static {
                        try {
                            DriverManager.registerDriver(new Driver());
                        } catch (SQLException var1) {
                            throw new RuntimeException("Can't register driver!");
                        }
                    }
                ```
            3. 补充:
                - 在`mysql-connector-java-5.1.37.jar` 的`5`版本之后 
                - 有一个文件在`mysql-connector-java-5.1.37.jar/META-INF/services/java.sql.Driver`里面
                - 这个文件可以让你省略注册驱动的步骤,好吧!
        2. 获取数据库连接:
            - 方法:`static Connection getConnection(String url,String user,String password)`
            - 参数:
                - `url`:指定连接的路径
                    - 语法:`jdbc:mysql://ip地址(域名):端口号/数据库名称`
                    - 例子:`jdbc:mysql://localhost:3306/plan`
                    - 细节:如果连接的是本机的mysql服务器,并且mysql服务器默认端口是3306,则url可以简写为:jdbc:mysql///数据库名称
                    - 例如:`Connection conn = DriverManager.getConnection("jdbc:mysql:///plan","root","");`
                - user:用户名
                - password:密码
2. Connection ：数据库连接对象,用于连接数据库并传送数据 
    1. 功能:
        1. 获取执行sql的对象
            - Statement createStatement
            - PreparedStatement prepareStatement(String sql)
- Statement ：执行sql的对象,负责执行SQL语句
- ResultSet：结果集对象,负责保存Statement执行后所产生的查询结果
- PreparedStatement : 执行sql的对象,用于负责执行SQL语句


























### JDBC的工作原理

```html
JDBC API
提供者：Sun公司
内容：供程序员调用的接口与类
DriverManager
提供者：Sun公司
作用：管理各种不同的JDBC驱动
 JDBC 驱动
提供者：数据库厂商
作用：负责连接各种不同的数据库
```

### Java方式连接数据库

![jdbc2server](/images/posts/java/JDBC/jdbc3.png)

### IDEA导入JDBC驱动的jar包

https://blog.csdn.net/SSY_1992/article/details/88344709
### 读取配置文件
Java中提供了Properties类来读取配置文件

```java
public class DB{
	//省略变量定义代码……	
	static{//静态代码块中调用，类加载时执行

		Properties pp=new Properties();

		InputStream is=DB.class.getClassLoader().getResourceAsStream("db.properties");
            //加载配置文件到输入流中

		try {
			pp.load(is);
            //从输入流中读取属性列表
			driver=pp.getProperty("driver");
			url=pp.getProperty("url");
            //根据指定的键获取对应的值
			user=pp.getProperty("user");
			password=pp.getProperty("password");

		} catch (IOException e) {//….}
		} //省略其他方法代码……}
```
### JDBC总结

#### 访问数据常用类和接口



#### 访问数据库的步骤
1. 加载JDBC驱动
2. 与数据库建立连接
3. 创建PreparedStatement对象发送SQL语句,并返回结果
4. 处理返回结果
5. 释放资源


#### 注意事项
遍历结果集中数据可使用列号或列名标识列

PreparedStatement比Statement提高了代码安全性,可读性,可维护性

#### properties
properties文件，以键值对的方式存储配置信息

properties类读取配置文件

